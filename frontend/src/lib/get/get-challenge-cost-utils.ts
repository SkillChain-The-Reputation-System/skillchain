import { readContract } from "@wagmi/core";
import { formatEther } from "viem";
import { ContractConfig_ChallengeCostManager } from "@/constants/contracts-config";
import { wagmiConfig } from "@/features/wallet/Web3Provider";

/**
 * Get the cost for joining a specific challenge from the ChallengeCostManager contract
 * @param challengeId The ID of the challenge to get the cost for
 * @returns The cost amount in ETH as a number
 */
export const getChallengeCost = async (challengeId: `0x${string}`): Promise<number> => {
  const costInWei = (await readContract(wagmiConfig, {
    address: ContractConfig_ChallengeCostManager.address as `0x${string}`,
    abi: ContractConfig_ChallengeCostManager.abi,
    functionName: "getCost",
    args: [challengeId],
  })) as bigint;

  // Convert from wei to ETH
  return parseFloat(formatEther(costInWei));
};

/**
 * Get the total revenue generated by a specific challenge
 * @param challengeId The ID of the challenge
 * @returns The total revenue in ETH
 */
export const getChallengeTotalRevenue = async (
  challengeId: number,
): Promise<number> => {
  const revenueInWei = (await readContract(wagmiConfig, {
    address: ContractConfig_ChallengeCostManager.address as `0x${string}`,
    abi: ContractConfig_ChallengeCostManager.abi,
    functionName: "getTotalRevenue",
    args: [challengeId],
  })) as bigint;

  return parseFloat(formatEther(revenueInWei));
};

/**
 * Get the payment a talent received for a given challenge
 * @param challengeId The challenge ID
 * @param talent The talent address
 * @returns The payment amount in ETH
 */
export const getChallengeTalentPayment = async (
  challengeId: number,
  talent: `0x${string}`,
): Promise<number> => {
  const paymentInWei = (await readContract(wagmiConfig, {
    address: ContractConfig_ChallengeCostManager.address as `0x${string}`,
    abi: ContractConfig_ChallengeCostManager.abi,
    functionName: "getTalentPayment",
    args: [challengeId, talent],
  })) as bigint;

  return parseFloat(formatEther(paymentInWei));
};

/**
 * Get the list of talents that have been paid for a specific challenge
 * @param challengeId The ID of the challenge
 * @returns Array of talent addresses
 */
export const getChallengeTalents = async (
  challengeId: number,
): Promise<`0x${string}`[]> => {
  const talents = (await readContract(wagmiConfig, {
    address: ContractConfig_ChallengeCostManager.address as `0x${string}`,
    abi: ContractConfig_ChallengeCostManager.abi,
    functionName: "getTalents",
    args: [challengeId],
  })) as `0x${string}`[];

  return talents;
};